package greendao;

import android.content.Context;
import android.util.Log;

import com.ctek.sba.R;
import com.ctek.sba.bluetooth.CTEK;

import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table DEVICE.
 */
public class Device implements java.io.Serializable {

  private Long id;
  private String name;
  private String address;
  private String imagePath;
  private String serialnumber;
  private Boolean previouslyBonded;
  private Long updated;
  private Integer readCursor;
  private Integer rssi;
  private Integer indicatorColor;
  private Double voltage;

  /**
   * Used to resolve relations
   */
  private transient DaoSession daoSession;

  /**
   * Used for active entity operations.
   */
  private transient DeviceDao myDao;

  private List<Voltage> voltageList;

  public Device() {
  }

  public Device(Long id) {
    this.id = id;
  }

  public Device(Long id, String name, String address, String imagePath, String serialnumber, Boolean previouslyBonded, Long updated, Integer readCursor, Integer rssi, Integer indicatorColor, Double voltage) {
    this.id = id;
    this.name = name;
    this.address = address;
    this.imagePath = imagePath;
    this.serialnumber = serialnumber;
    this.previouslyBonded = previouslyBonded;
    this.updated = updated;
    this.readCursor = readCursor;
    this.rssi = rssi;
    this.indicatorColor = indicatorColor;
    this.voltage = voltage;
  }

  /**
   * called by internal mechanisms, do not call yourself.
   */
  public void __setDaoSession(DaoSession daoSession) {
    this.daoSession = daoSession;
    myDao = daoSession != null ? daoSession.getDeviceDao() : null;
  }

  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public String getImagePath() {
    return imagePath;
  }

  public void setImagePath(String imagePath) {
    this.imagePath = imagePath;
  }

  public String getSerialnumber() {
    return serialnumber;
  }

  public void setSerialnumber(String serialnumber) {
    this.serialnumber = serialnumber;
  }

  public Boolean getPreviouslyBonded() {
    return previouslyBonded;
  }

  public void setPreviouslyBonded(Boolean previouslyBonded) {
    this.previouslyBonded = previouslyBonded;
  }

  public Long getUpdated() {
    return updated;
  }

  public void setUpdated(Long updated) {
    this.updated = updated;
  }

  public Integer getReadCursor() {
    return readCursor;
  }

  public void setReadCursor(Integer readCursor) {
    this.readCursor = readCursor;
  }

  public Integer getRssi() {
    return rssi;
  }

  public void setRssi(Integer rssi) {
    this.rssi = rssi;
  }

  public Integer getIndicatorColor() {
    return indicatorColor!=null? indicatorColor : 0;
  }

  public void setIndicatorColor(Integer indicatorColor) {
    this.indicatorColor = indicatorColor;
  }

  public Double getVoltage() {
    return voltage;
  }

  public void setVoltage(Double voltage) {
    this.voltage = voltage;
  }

  /**
   * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
   */
  public List<Voltage> getVoltageList(String caller) {
    if (voltageList == null) {
      if (daoSession == null) {
        throw new DaoException("Entity is detached from DAO context");
      }
      VoltageDao targetDao = daoSession.getVoltageDao();
      List<Voltage> voltageListNew = targetDao._queryDevice_VoltageList(id);
      Collections.sort(voltageListNew, Voltage.compareByTimestamp);
      synchronized (this) {
        if (voltageList == null) {
          voltageList = voltageListNew;
        }
      }
    }

    int iiSize = (voltageList!=null) ? voltageList.size() : 0;
    Log.d("DEVICE_", caller + " --> id = " + id + (iiSize!=0 ? voltageList.get(iiSize-1).toString() : " NULL"));
    return voltageList;
  }

  public void setVoltageList(List<Voltage> voltages) {
    this.voltageList = voltages;
  }

  /**
   * Resets a to-many relationship, making the next get call to query for a fresh result.
   */
  public synchronized void resetVoltageList() {
    voltageList = null;
  }

  /**
   * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
   */
  public void delete() {
    if (myDao == null) {
      throw new DaoException("Entity is detached from DAO context");
    }
    myDao.delete(this);
  }

  /**
   * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
   */
  public void update() {
    if (myDao == null) {
      throw new DaoException("Entity is detached from DAO context");
    }
    myDao.update(this);
  }

  /**
   * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
   */
  public void refresh() {
    if (myDao == null) {
      throw new DaoException("Entity is detached from DAO context");
    }
    myDao.refresh(this);
  }

  public String getUpdateString (Context ctx) {
    String updateText;
    try {
      DateFormat dateFormat = android.text.format.DateFormat.getDateFormat(ctx);
      DateFormat timeFormat = android.text.format.DateFormat.getTimeFormat(ctx);
      Date myDate = new Date(getUpdated());
      String date = dateFormat.format(myDate);
      String time = timeFormat.format(myDate);
      updateText = ctx.getResources().getString(R.string.last_sync) + "\n" + date + " " + time;
    }
    catch(Exception xpt) {
      // xpt.printStackTrace();
      updateText = "";
    }
    return updateText;
  }

} // EOClass Device
