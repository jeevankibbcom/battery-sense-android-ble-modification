package greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import greendao.Voltage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table VOLTAGE.
*/
public class VoltageDao extends AbstractDao<Voltage, Long> {

    public static final String TABLENAME = "VOLTAGE";

    /**
     * Properties of entity Voltage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Timestamp = new Property(1, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Value = new Property(2, Double.class, "value", false, "VALUE");
        public final static Property DeviceId = new Property(3, long.class, "deviceId", false, "DEVICE_ID");
        public final static Property Temperature = new Property(4, Double.class, "temperature", false, "TEMPERATURE");
    };
  public static final double DFLT_TEMPERATURE = 47.d;

  private Query<Voltage> device_VoltageListQuery;

    public VoltageDao(DaoConfig config) {
        super(config);
    }

    public VoltageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'VOLTAGE' (" + //
                "'_id' INTEGER PRIMARY KEY ," +     // 0: id
                "'TIMESTAMP' INTEGER," +            // 1: timestamp
                "'VALUE' REAL," +                   // 2: value
                "'DEVICE_ID' INTEGER NOT NULL," +   // 3: deviceId
                "'TEMPERATURE' REAL);"              // 4: temperature
        );
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VOLTAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Voltage entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(2, timestamp);
        }

        Double value = entity.getValue();
        if (value != null) {
            stmt.bindDouble(3, value);
        }
        stmt.bindLong(4, entity.getDeviceId());

      Double temp = entity.getTemperature();
      if(temp!=null) {
        stmt.bindDouble(5, temp);
      }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Voltage readEntity(Cursor cursor, int offset) {
        Voltage entity = new Voltage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // timestamp
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // value
            cursor.getLong(offset + 3), // deviceId
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4) // temperature
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Voltage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimestamp(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setValue(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setDeviceId(cursor.getLong(offset + 3));
        entity.setTemperature(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
     }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Voltage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Voltage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /** Internal query to resolve the "voltageList" to-many relationship of Device. */
    public List<Voltage> _queryDevice_VoltageList(long deviceId) {
        synchronized (this) {
            if (device_VoltageListQuery == null) {
                QueryBuilder<Voltage> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DeviceId.eq(null));
                device_VoltageListQuery = queryBuilder.build();
            }
        }
        Query<Voltage> query = device_VoltageListQuery.forCurrentThread();
        query.setParameter(0, deviceId);
        return query.list();
    }

}
