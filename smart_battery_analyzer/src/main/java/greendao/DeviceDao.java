package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Device;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DEVICE.
*/
public class DeviceDao extends AbstractDao<Device, Long> {

    public static final String TABLENAME = "DEVICE";

    /**
     * Properties of entity Device.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property ImagePath = new Property(3, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property Serialnumber = new Property(4, String.class, "serialnumber", false, "SERIALNUMBER");
        public final static Property PreviouslyBonded = new Property(5, Boolean.class, "previouslyBonded", false, "PREVIOUSLY_BONDED");
        public final static Property Updated = new Property(6, Long.class, "updated", false, "UPDATED");
        public final static Property ReadCursor = new Property(7, Integer.class, "readCursor", false, "READ_CURSOR");
        public final static Property Rssi = new Property(8, Integer.class, "rssi", false, "RSSI");
        public final static Property IndicatorColor = new Property(9, Integer.class, "indicatorColor", false, "INDICATOR_COLOR");
        public final static Property Voltage = new Property(10, Double.class, "voltage", false, "VOLTAGE");
    };

    private DaoSession daoSession;


    public DeviceDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DEVICE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'ADDRESS' TEXT," + // 2: address
                "'IMAGE_PATH' TEXT," + // 3: imagePath
                "'SERIALNUMBER' TEXT," + // 4: serialnumber
                "'PREVIOUSLY_BONDED' INTEGER," + // 5: previouslyBonded
                "'UPDATED' INTEGER," + // 6: updated
                "'READ_CURSOR' INTEGER," + // 7: readCursor
                "'RSSI' INTEGER," + // 8: rssi
                "'INDICATOR_COLOR' INTEGER," + // 9: indicatorColor
                "'VOLTAGE' REAL);"); // 10: voltage
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DEVICE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(4, imagePath);
        }
 
        String serialnumber = entity.getSerialnumber();
        if (serialnumber != null) {
            stmt.bindString(5, serialnumber);
        }
 
        Boolean previouslyBonded = entity.getPreviouslyBonded();
        if (previouslyBonded != null) {
            stmt.bindLong(6, previouslyBonded ? 1l: 0l);
        }
 
        Long updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(7, updated);
        }
 
        Integer readCursor = entity.getReadCursor();
        if (readCursor != null) {
            stmt.bindLong(8, readCursor);
        }
 
        Integer rssi = entity.getRssi();
        if (rssi != null) {
            stmt.bindLong(9, rssi);
        }
 
        Integer indicatorColor = entity.getIndicatorColor();
        if (indicatorColor != null) {
            stmt.bindLong(10, indicatorColor);
        }
 
        Double voltage = entity.getVoltage();
        if (voltage != null) {
            stmt.bindDouble(11, voltage);
        }
    }

    @Override
    protected void attachEntity(Device entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Device readEntity(Cursor cursor, int offset) {
        Device entity = new Device( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imagePath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // serialnumber
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // previouslyBonded
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // updated
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // readCursor
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // rssi
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // indicatorColor
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10) // voltage
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Device entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImagePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSerialnumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPreviouslyBonded(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setUpdated(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setReadCursor(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setRssi(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIndicatorColor(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setVoltage(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Device entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Device entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
